[shadow="hint"] {
	
	background: rgba(0,0,0,.5);
	border-radius: .1rem;
	box-sizing: border-box;
	color: rgba(255,255,255,1);
	content: attr(data-alt);
	display: none;
	font: normal normal normal .6rem/1 sans-serif;
	left: calc(var(--bound-1-left) + var(--scroll-x) + (var(--bound-1-width) - var(--bound-width)) / 2);
	letter-spacing: 1px;
	opacity: 0;
	padding: .5rem;
	pointer-events: none;
	position: absolute;
	top: calc((var(--bound-1-top) + var(--scroll-y) + var(--bound-height) * -1.1));
	translate: 0% 0%;
	width: max-content;
	will-change: opacity, translate;
	z-index: 1;
	
}
[shadow="hint"]::before {
	
	content: attr(data-alt);
	
}
[shadow="hint"]:not([exiting]) {
	
	display: block;
	
	animation: hint-spawn .2s ease-out .5s 1 normal forwards running;
	
}
[shadow="hint"][exiting]:not(html) {
	
	display: block;
	
	animation: hint-exit .2s ease-out 0s 1 normal forwards running;
	
}
@keyframes hint-spawn {
	
	from {
		opacity: 0;
		translate: 0% 0%;
	}
	
	to {
		opacity: 1;
		translate: 0% -10%;
	}
	
}
@keyframes hint-exit {
	
	from {
		opacity: 1;
		translate: 0% -10%;
	}
	
	to {
		opacity: 0;
		translate: 0% 0%;
	}
	
}
/*
[shadow="hint"] {
	
	background: rgba(0,0,0,.5);
	border-radius: .1rem;
	box-sizing: border-box;
	color: rgba(255,255,255,1);
	content: attr(data-alt);
	display: none;
	font: normal normal normal .6rem/1 sans-serif;
	left: calc(var(--bound-1-left) + var(--scroll-x) + (var(--bound-1-width) - var(--bound-width)) / 2);
	letter-spacing: 1px;
	opacity: 0;
	padding: .5rem;
	pointer-events: none;
	position: absolute;
	top: calc((var(--bound-1-top) + var(--scroll-y) + var(--bound-height) * -1.1));
	translate: 0% 0%;
	width: max-content;
	will-change: opacity, translate;
	z-index: 1;
	
}
[shadow="hint"]::before {
	
	content: attr(data-alt);
	
}
[shadow="hint"]:not([exiting]) {
	
	display: block;
	
	animation: hint-spawn .2s ease-out .5s 1 normal forwards running;
	
}
[shadow="hint"][exiting]:not(html) {
	
	display: block;
	/*
		coco 以下の説明は必ずしも正しくなく問題は依然未解決。
		coco boundの取得処理をアニメ再生時だけでなくconstrained指定時にも事前に行なう。（恐らく解決にはならない）
		以下の !important を外すと、hint-spawn のアニメ再生中に hint-exit の再生が割り込んだ時に、
		一瞬アニメによる CSS 宣言の適用前の状態の要素が表示されてしまうため外してはならない。
		これはこのブロック内のセレクターの詳細度より hint-spawn のアニメーションを宣言するブロックのセレクターの詳細度が高いため、
		割り込まれたときの hint-spawn の opacity の値が、hint-exit 再生前の要素にそのまま適用されるのが原因と思われる。
	*//*
	
	animation: hint-exit .2s ease-out 0s 1 normal forwards running;
	
}
@keyframes hint-spawn {
	
	from {
		opacity: 0;
		translate: 0% 0%;
	}
	
	to {
		opacity: 1;
		translate: 0% -10%;
	}
	
}
@keyframes hint-exit {
	
	from {
		opacity: 1;
		translate: 0% -10%;
	}
	
	to {
		opacity: 0;
		translate: 0% 0%;
	}
	
}
*/